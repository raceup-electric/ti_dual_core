/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef CAN2_H
#define CAN2_H

/* If the contents of this file have caused breaking changes for you, you could try using
   an older version of the generator. You can specify this on the command line with
   the -n option. */
#define DBCC_GENERATOR_VERSION (3)

#include <stdint.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" { 
#endif

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32_t dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
	DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
	DBCC_SIG_STAT_OK_E            = 1, /* Message ok */
	DBCC_SIG_STAT_ERROR_E         = 2, /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

#define CAN_ID_DRIVER (83) /* 0x53 */
#define CAN_ID_PADDLE (84) /* 0x54 */
#define CAN_ID_BMSHV1 (85) /* 0x55 */
#define CAN_ID_BMSHV2 (86) /* 0x56 */
#define CAN_ID_BMSLV1 (87) /* 0x57 */
#define CAN_ID_BMSLV2 (88) /* 0x58 */
#define CAN_ID_IMU1 (96) /* 0x60 */
#define CAN_ID_IMU2 (97) /* 0x61 */
#define CAN_ID_IMU3 (98) /* 0x62 */
#define CAN_ID_MAP (99) /* 0x63 */
#define CAN_ID_TEMP1 (256) /* 0x100 */
#define CAN_ID_TEMP2 (257) /* 0x101 */
#define CAN_ID_SUSPFRONT (258) /* 0x102 */
#define CAN_ID_SUSPREAR (259) /* 0x103 */
#define CAN_ID_INVVOLT (288) /* 0x120 */
#define CAN_ID_PCU (304) /* 0x130 */
#define CAN_ID_CALIB (305) /* 0x131 */
#define CAN_ID_CALIBSTEP (306) /* 0x132 */
#define CAN_ID_LEM (962) /* 0x3c2 */

typedef PREPACK struct {
	/* steering: Steering angle in milli radians */
	/* scaling 1.0, offset 0.0, units mrad  */
	int16_t steering;
	/* throttle: % of throttle */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t throttle;
	/* brake: % of brake pedal */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t brake;
} POSTPACK can_0x053_Driver_t;

typedef PREPACK struct {
	/* regen: % of regen paddle travel */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t regen;
} POSTPACK can_0x054_Paddle_t;

typedef PREPACK struct {
	/* max_volt: Maximum cell voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t max_volt;
	/* min_volt: Minimum cell voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t min_volt;
	/* avg_volt: Average cell voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t avg_volt;
	/* soc: HV battery SOC in % */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t soc;
} POSTPACK can_0x055_BmsHv1_t;

typedef PREPACK struct {
	/* max_temp: Maximum cell temperature in celsius */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t max_temp;
	/* min_temp: Minimum cell temperature in celsius */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t min_temp;
	/* avg_temp: Average cell temperature in celsius */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t avg_temp;
	/* fan_speed: % of HV battery fan speed */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t fan_speed;
} POSTPACK can_0x056_BmsHv2_t;

typedef PREPACK struct {
	/* volt1: Cell 1 voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t volt1;
	/* volt2: Cell 2 voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t volt2;
	/* volt3: Cell 3 voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t volt3;
	/* volt4: Cell 4 voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t volt4;
} POSTPACK can_0x057_BmsLv1_t;

typedef PREPACK struct {
	/* volt5: Cell 5 voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t volt5;
	/* volt6: Cell 6 voltage in mv */
	/* scaling 0.1, offset 0.0, units mV  */
	uint16_t volt6;
	/* temp1: Temperature sensor 1 reading in celsius */
	/* scaling 0.0, offset 0.0, units C  */
	uint16_t temp1;
	/* temp2: Temperature sensor 2 reading in celsius */
	/* scaling 0.0, offset 0.0, units C  */
	uint16_t temp2;
} POSTPACK can_0x058_BmsLv2_t;

typedef PREPACK struct {
	/* acc_x: Acceleration on x axis in m/s^2 */
	/* scaling 1.0, offset 0.0, units m/s^2  */
	int32_t acc_x;
	/* acc_y: Acceleration on y axis in m/s^2 */
	/* scaling 1.0, offset 0.0, units m/s^2  */
	int32_t acc_y;
} POSTPACK can_0x060_Imu1_t;

typedef PREPACK struct {
	/* acc_z: Acceleration on z axis in m/s^2 */
	/* scaling 1.0, offset 0.0, units m/s^2  */
	int32_t acc_z;
	/* omega_x: Angular speed on x axis in rad/s */
	/* scaling 1.0, offset 0.0, units rad/s  */
	int32_t omega_x;
} POSTPACK can_0x061_Imu2_t;

typedef PREPACK struct {
	/* omega_y: Angular speed on x axis in rad/s */
	/* scaling 1.0, offset 0.0, units rad/s  */
	int32_t omega_y;
	/* omega_z: Angular speed on x axis in rad/s */
	/* scaling 1.0, offset 0.0, units rad/s  */
	int32_t omega_z;
} POSTPACK can_0x062_Imu3_t;

typedef PREPACK struct {
	/* power: Map selected number */
	/* scaling 1.0, offset 0.0, units map  */
	uint8_t power;
	/* regen: Map selected for regen braking */
	/* scaling 1.0, offset 0.0, units map  */
	uint8_t regen;
} POSTPACK can_0x063_Map_t;

typedef PREPACK struct {
	/* r_inv_temp_in: Right inverter inlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t r_inv_temp_in;
	/* r_inv_temp_out: Right inverter outlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t r_inv_temp_out;
	/* l_inv_temp_in: Left inverter inlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t l_inv_temp_in;
	/* l_inv_temp_out: Left inverter outlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t l_inv_temp_out;
} POSTPACK can_0x100_Temp1_t;

typedef PREPACK struct {
	/* r_mot_temp_in: Right motor inlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t r_mot_temp_in;
	/* r_mot_temp_out: Right motor outlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t r_mot_temp_out;
	/* l_mot_temp_in: Left motor inlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t l_mot_temp_in;
	/* l_mot_temp_out: Right motor outlet water temperature */
	/* scaling 1.0, offset 0.0, units C  */
	uint16_t l_mot_temp_out;
} POSTPACK can_0x101_Temp2_t;

typedef PREPACK struct {
	/* susp_fr: FR suspension travel in mm */
	/* scaling 1.0, offset 0.0, units mm  */
	uint16_t susp_fr;
	/* susp_fl: FL suspension travel in mm */
	/* scaling 1.0, offset 0.0, units mm  */
	uint16_t susp_fl;
	uint16_t temp_mr; /* scaling 1.0, offset 0.0, units c  */
	uint16_t temp_ml; /* scaling 1.0, offset 0.0, units c  */
} POSTPACK can_0x102_SuspFront_t;

typedef PREPACK struct {
	/* susp_rr: RR suspension travel in mm */
	/* scaling 1.0, offset 0.0, units mm  */
	uint16_t susp_rr;
	/* susp_rl: RL suspension travel in mm */
	/* scaling 1.0, offset 0.0, units mm  */
	uint16_t susp_rl;
} POSTPACK can_0x103_SuspRear_t;

typedef PREPACK struct {
	/* car_voltage: Voltage seen from car side (inverter) in volts */
	/* scaling 1.0, offset 0.0, units V  */
	uint16_t car_voltage;
} POSTPACK can_0x120_InvVolt_t;

typedef PREPACK struct {
	/* fan_speed: Water radiator fan speed in % */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t fan_speed;
	/* pump_speed: Water pump speed */
	/* scaling 1.0, offset 0.0, units %  */
	uint8_t pump_speed;
	/* fan_enable: Water radiator fan enable */
	/* scaling 1.0, offset 0.0, units on  */
	uint8_t fan_enable;
	/* pump_enable: Water pump enable */
	/* scaling 1.0, offset 0.0, units on  */
	uint8_t pump_enable;
} POSTPACK can_0x130_Pcu_t;

typedef PREPACK struct {
	/* position: Set calibration of rest value (0) or 100% (1) */
	/* scaling 1.0, offset 0.0, units high  */
	uint8_t position;
} POSTPACK can_0x131_Calib_t;

typedef PREPACK struct {
	uint8_t position; /* scaling 1.0, offset 0.0, units high  */
} POSTPACK can_0x132_CalibStep_t;

typedef PREPACK struct {
	/* current: Current seen from LEM on car side (PDB) */
	/* scaling 1.0, offset 0.0, units mA  */
	uint32_t current;
} POSTPACK can_0x3c2_Lem_t;

typedef PREPACK struct {
	dbcc_time_stamp_t can_0x053_Driver_time_stamp_rx;
	dbcc_time_stamp_t can_0x054_Paddle_time_stamp_rx;
	dbcc_time_stamp_t can_0x055_BmsHv1_time_stamp_rx;
	dbcc_time_stamp_t can_0x056_BmsHv2_time_stamp_rx;
	dbcc_time_stamp_t can_0x057_BmsLv1_time_stamp_rx;
	dbcc_time_stamp_t can_0x058_BmsLv2_time_stamp_rx;
	dbcc_time_stamp_t can_0x060_Imu1_time_stamp_rx;
	dbcc_time_stamp_t can_0x061_Imu2_time_stamp_rx;
	dbcc_time_stamp_t can_0x062_Imu3_time_stamp_rx;
	dbcc_time_stamp_t can_0x063_Map_time_stamp_rx;
	dbcc_time_stamp_t can_0x100_Temp1_time_stamp_rx;
	dbcc_time_stamp_t can_0x101_Temp2_time_stamp_rx;
	dbcc_time_stamp_t can_0x102_SuspFront_time_stamp_rx;
	dbcc_time_stamp_t can_0x103_SuspRear_time_stamp_rx;
	dbcc_time_stamp_t can_0x120_InvVolt_time_stamp_rx;
	dbcc_time_stamp_t can_0x130_Pcu_time_stamp_rx;
	dbcc_time_stamp_t can_0x131_Calib_time_stamp_rx;
	dbcc_time_stamp_t can_0x132_CalibStep_time_stamp_rx;
	dbcc_time_stamp_t can_0x3c2_Lem_time_stamp_rx;
	unsigned can_0x053_Driver_status : 2;
	unsigned can_0x053_Driver_tx : 1;
	unsigned can_0x053_Driver_rx : 1;
	unsigned can_0x054_Paddle_status : 2;
	unsigned can_0x054_Paddle_tx : 1;
	unsigned can_0x054_Paddle_rx : 1;
	unsigned can_0x055_BmsHv1_status : 2;
	unsigned can_0x055_BmsHv1_tx : 1;
	unsigned can_0x055_BmsHv1_rx : 1;
	unsigned can_0x056_BmsHv2_status : 2;
	unsigned can_0x056_BmsHv2_tx : 1;
	unsigned can_0x056_BmsHv2_rx : 1;
	unsigned can_0x057_BmsLv1_status : 2;
	unsigned can_0x057_BmsLv1_tx : 1;
	unsigned can_0x057_BmsLv1_rx : 1;
	unsigned can_0x058_BmsLv2_status : 2;
	unsigned can_0x058_BmsLv2_tx : 1;
	unsigned can_0x058_BmsLv2_rx : 1;
	unsigned can_0x060_Imu1_status : 2;
	unsigned can_0x060_Imu1_tx : 1;
	unsigned can_0x060_Imu1_rx : 1;
	unsigned can_0x061_Imu2_status : 2;
	unsigned can_0x061_Imu2_tx : 1;
	unsigned can_0x061_Imu2_rx : 1;
	unsigned can_0x062_Imu3_status : 2;
	unsigned can_0x062_Imu3_tx : 1;
	unsigned can_0x062_Imu3_rx : 1;
	unsigned can_0x063_Map_status : 2;
	unsigned can_0x063_Map_tx : 1;
	unsigned can_0x063_Map_rx : 1;
	unsigned can_0x100_Temp1_status : 2;
	unsigned can_0x100_Temp1_tx : 1;
	unsigned can_0x100_Temp1_rx : 1;
	unsigned can_0x101_Temp2_status : 2;
	unsigned can_0x101_Temp2_tx : 1;
	unsigned can_0x101_Temp2_rx : 1;
	unsigned can_0x102_SuspFront_status : 2;
	unsigned can_0x102_SuspFront_tx : 1;
	unsigned can_0x102_SuspFront_rx : 1;
	unsigned can_0x103_SuspRear_status : 2;
	unsigned can_0x103_SuspRear_tx : 1;
	unsigned can_0x103_SuspRear_rx : 1;
	unsigned can_0x120_InvVolt_status : 2;
	unsigned can_0x120_InvVolt_tx : 1;
	unsigned can_0x120_InvVolt_rx : 1;
	unsigned can_0x130_Pcu_status : 2;
	unsigned can_0x130_Pcu_tx : 1;
	unsigned can_0x130_Pcu_rx : 1;
	unsigned can_0x131_Calib_status : 2;
	unsigned can_0x131_Calib_tx : 1;
	unsigned can_0x131_Calib_rx : 1;
	unsigned can_0x132_CalibStep_status : 2;
	unsigned can_0x132_CalibStep_tx : 1;
	unsigned can_0x132_CalibStep_rx : 1;
	unsigned can_0x3c2_Lem_status : 2;
	unsigned can_0x3c2_Lem_tx : 1;
	unsigned can_0x3c2_Lem_rx : 1;
	can_0x053_Driver_t can_0x053_Driver;
	can_0x054_Paddle_t can_0x054_Paddle;
	can_0x055_BmsHv1_t can_0x055_BmsHv1;
	can_0x056_BmsHv2_t can_0x056_BmsHv2;
	can_0x057_BmsLv1_t can_0x057_BmsLv1;
	can_0x058_BmsLv2_t can_0x058_BmsLv2;
	can_0x060_Imu1_t can_0x060_Imu1;
	can_0x061_Imu2_t can_0x061_Imu2;
	can_0x062_Imu3_t can_0x062_Imu3;
	can_0x063_Map_t can_0x063_Map;
	can_0x100_Temp1_t can_0x100_Temp1;
	can_0x101_Temp2_t can_0x101_Temp2;
	can_0x102_SuspFront_t can_0x102_SuspFront;
	can_0x103_SuspRear_t can_0x103_SuspRear;
	can_0x120_InvVolt_t can_0x120_InvVolt;
	can_0x130_Pcu_t can_0x130_Pcu;
	can_0x131_Calib_t can_0x131_Calib;
	can_0x132_CalibStep_t can_0x132_CalibStep;
	can_0x3c2_Lem_t can_0x3c2_Lem;
} POSTPACK can_obj_can2_h_t;

int unpack_message(can_obj_can2_h_t *o, const unsigned long id, uint64_t data, uint8_t dlc, dbcc_time_stamp_t time_stamp);
int pack_message(can_obj_can2_h_t *o, const unsigned long id, uint64_t *data);
int print_message(const can_obj_can2_h_t *o, const unsigned long id, FILE *output);

int decode_can_0x053_steering(const can_obj_can2_h_t *o, int16_t *out);
int encode_can_0x053_steering(can_obj_can2_h_t *o, int16_t in);
int decode_can_0x053_throttle(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x053_throttle(can_obj_can2_h_t *o, uint8_t in);
int decode_can_0x053_brake(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x053_brake(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x054_regen(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x054_regen(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x055_max_volt(const can_obj_can2_h_t *o, double *out);
int encode_can_0x055_max_volt(can_obj_can2_h_t *o, double in);
int decode_can_0x055_min_volt(const can_obj_can2_h_t *o, double *out);
int encode_can_0x055_min_volt(can_obj_can2_h_t *o, double in);
int decode_can_0x055_avg_volt(const can_obj_can2_h_t *o, double *out);
int encode_can_0x055_avg_volt(can_obj_can2_h_t *o, double in);
int decode_can_0x055_soc(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x055_soc(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x056_max_temp(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x056_max_temp(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x056_min_temp(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x056_min_temp(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x056_avg_temp(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x056_avg_temp(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x056_fan_speed(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x056_fan_speed(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x057_volt1(const can_obj_can2_h_t *o, double *out);
int encode_can_0x057_volt1(can_obj_can2_h_t *o, double in);
int decode_can_0x057_volt2(const can_obj_can2_h_t *o, double *out);
int encode_can_0x057_volt2(can_obj_can2_h_t *o, double in);
int decode_can_0x057_volt3(const can_obj_can2_h_t *o, double *out);
int encode_can_0x057_volt3(can_obj_can2_h_t *o, double in);
int decode_can_0x057_volt4(const can_obj_can2_h_t *o, double *out);
int encode_can_0x057_volt4(can_obj_can2_h_t *o, double in);


int decode_can_0x058_volt5(const can_obj_can2_h_t *o, double *out);
int encode_can_0x058_volt5(can_obj_can2_h_t *o, double in);
int decode_can_0x058_volt6(const can_obj_can2_h_t *o, double *out);
int encode_can_0x058_volt6(can_obj_can2_h_t *o, double in);
int decode_can_0x058_temp1(const can_obj_can2_h_t *o, double *out);
int encode_can_0x058_temp1(can_obj_can2_h_t *o, double in);
int decode_can_0x058_temp2(const can_obj_can2_h_t *o, double *out);
int encode_can_0x058_temp2(can_obj_can2_h_t *o, double in);


int decode_can_0x060_acc_x(const can_obj_can2_h_t *o, int32_t *out);
int encode_can_0x060_acc_x(can_obj_can2_h_t *o, int32_t in);
int decode_can_0x060_acc_y(const can_obj_can2_h_t *o, int32_t *out);
int encode_can_0x060_acc_y(can_obj_can2_h_t *o, int32_t in);


int decode_can_0x061_acc_z(const can_obj_can2_h_t *o, int32_t *out);
int encode_can_0x061_acc_z(can_obj_can2_h_t *o, int32_t in);
int decode_can_0x061_omega_x(const can_obj_can2_h_t *o, int32_t *out);
int encode_can_0x061_omega_x(can_obj_can2_h_t *o, int32_t in);


int decode_can_0x062_omega_y(const can_obj_can2_h_t *o, int32_t *out);
int encode_can_0x062_omega_y(can_obj_can2_h_t *o, int32_t in);
int decode_can_0x062_omega_z(const can_obj_can2_h_t *o, int32_t *out);
int encode_can_0x062_omega_z(can_obj_can2_h_t *o, int32_t in);


int decode_can_0x063_power(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x063_power(can_obj_can2_h_t *o, uint8_t in);
int decode_can_0x063_regen(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x063_regen(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x100_r_inv_temp_in(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x100_r_inv_temp_in(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x100_r_inv_temp_out(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x100_r_inv_temp_out(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x100_l_inv_temp_in(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x100_l_inv_temp_in(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x100_l_inv_temp_out(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x100_l_inv_temp_out(can_obj_can2_h_t *o, uint16_t in);


int decode_can_0x101_r_mot_temp_in(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x101_r_mot_temp_in(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x101_r_mot_temp_out(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x101_r_mot_temp_out(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x101_l_mot_temp_in(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x101_l_mot_temp_in(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x101_l_mot_temp_out(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x101_l_mot_temp_out(can_obj_can2_h_t *o, uint16_t in);


int decode_can_0x102_susp_fr(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x102_susp_fr(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x102_susp_fl(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x102_susp_fl(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x102_temp_mr(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x102_temp_mr(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x102_temp_ml(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x102_temp_ml(can_obj_can2_h_t *o, uint16_t in);


int decode_can_0x103_susp_rr(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x103_susp_rr(can_obj_can2_h_t *o, uint16_t in);
int decode_can_0x103_susp_rl(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x103_susp_rl(can_obj_can2_h_t *o, uint16_t in);


int decode_can_0x120_car_voltage(const can_obj_can2_h_t *o, uint16_t *out);
int encode_can_0x120_car_voltage(can_obj_can2_h_t *o, uint16_t in);


int decode_can_0x130_fan_speed(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x130_fan_speed(can_obj_can2_h_t *o, uint8_t in);
int decode_can_0x130_pump_speed(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x130_pump_speed(can_obj_can2_h_t *o, uint8_t in);
int decode_can_0x130_fan_enable(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x130_fan_enable(can_obj_can2_h_t *o, uint8_t in);
int decode_can_0x130_pump_enable(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x130_pump_enable(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x131_position(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x131_position(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x132_position(const can_obj_can2_h_t *o, uint8_t *out);
int encode_can_0x132_position(can_obj_can2_h_t *o, uint8_t in);


int decode_can_0x3c2_current(const can_obj_can2_h_t *o, uint32_t *out);
int encode_can_0x3c2_current(can_obj_can2_h_t *o, uint32_t in);


#ifdef __cplusplus
} 
#endif

#endif
